#!/usr/bin/env python
# coding: utf-8

# # 0. Initializing

# In[1]:


get_ipython().run_cell_magic('time', '', 'from pyspark.sql import SparkSession\nimport glow\nspark = SparkSession \\\n    .builder \\\n    .appName("PythonPi") \\\n    .config("spark.driver.memory", "10g") \\\n    .config("spark.jars.packages", "io.projectglow:glow-spark3_2.12:1.1.2") \\\n    .config("spark.hadoop.io.compression.codecs", "io.projectglow.sql.util.BGZFCodec") \\\n    .getOrCreate()\nspark = glow.register(spark)\nimport pandas as pd\npd.set_option(\'max_columns\', None)\n')


# # 1. Loading databases

# In[2]:


get_ipython().run_cell_magic('time', '', "import pyspark.sql.functions as F\nfrom pyspark.sql.types import StringType\n\ncond = ['chromosome', 'start', 'reference', 'alternate']\n\n# Table ClinVar\nclinvar = spark.read.parquet('/sbgenomics/project-files/clinvar_stable/')\n\n# Table dbnsfp_annovar, added a column for ratio of damage predictions to all predictions\ndbnsfp = spark.read.parquet('/sbgenomics/project-files/annovar/dbnsfp/').select(cond + [F.col('DamagePredCount')])\nc_dbn = ['DamagePredCount', 'PredCountRatio_D2T']\nt_dbn = dbnsfp \\\n    .withColumn('PredCountRatio_D2T', \\\n                F.when(F.split(F.col('DamagePredCount'), '_')[1] == 0, F.lit(None).cast(F.StringType())) \\\n                .otherwise(F.split(F.col('DamagePredCount'), '_')[0] / F.split(F.col('DamagePredCount'), '_')[1])) \\\n    .select(cond + c_dbn)\n\n# GenCC genes\ngencc = spark.read.parquet('/sbgenomics/project-files/gencc20231003/')\ng_genc = gencc \\\n    .select('gene_symbol', 'disease_curie', 'disease_title', 'classification_title', 'moi_title') \\\n    .withColumnRenamed('gene_symbol', 'GenCC_gene_symbol') \\\n    .withColumnRenamed('disease_curie', 'GenCC_disease_curie') \\\n    .withColumnRenamed('disease_title', 'GenCC_disease_title') \\\n    .withColumnRenamed('classification_title', 'GenCC_classification_title') \\\n    .withColumnRenamed('moi_title', 'GenCC_moi_title') \\\n    .groupBy('GenCC_gene_symbol') \\\n    .agg(F.collect_set('GenCC_disease_curie').alias('GenCC_disease_curie_combined'), \\\n         F.collect_set('GenCC_disease_title').alias('GenCC_disease_title_combined'), \\\n         F.collect_set('GenCC_classification_title').alias('GenCC_classification_title_combined'), \\\n         F.collect_set('GenCC_moi_title').alias('GenCC_moi_title_combined'))\n\nhgmd_var = spark.read.parquet('/sbgenomics/project-files/hg38_HGMD2023Q3_variant/')\n\n# HGMD genes\nhgmd_gene = spark.read.parquet('/sbgenomics/project-files/hg38_HGMD2023Q3_gene_sorted/')\ng_hgmd = hgmd_gene \\\n    .select('entrez_gene_id', 'symbol', 'DM', 'DM?') \\\n    .withColumnRenamed('symbol', 'HGMD_symbol') \\\n    .withColumnRenamed('DM', 'HGMD_DM') \\\n    .withColumnRenamed('DM?', 'HGMD_DM?')\n\n# OMIM genes\nomim_gene = spark.read.parquet('/sbgenomics/project-files/omim_gene_set/')\ng_omim = omim_gene \\\n    .select('entrez_gene_id', 'omim_gene_id', 'phenotype') \\\n    .withColumnRenamed('entrez_gene_id', 'OMIM_entrez_gene_id') \\\n    .withColumnRenamed('omim_gene_id', 'OMIM_gene_id') \\\n    .withColumnRenamed('phenotype', 'OMIM_phenotype') \\\n    .groupBy('OMIM_entrez_gene_id') \\\n    .agg(F.collect_set('OMIM_gene_id').alias('OMIM_gene_id'), \\\n         F.collect_set('OMIM_phenotype').cast(StringType()).alias('OMIM_phenotype_combined')) \\\n    .withColumn('OMIM_phenotype_combined', \\\n                F.when(F.col('OMIM_phenotype_combined') == '[]', F.lit(None)).otherwise(F.col('OMIM_phenotype_combined')))\n# Orphanet genes\norphanet_gene = spark.read.parquet('/sbgenomics/project-files/orphanet_gene_set/')\ng_orph = orphanet_gene \\\n    .select('gene_symbol', 'disorder_id', 'gene_source_of_validation', 'HGNC_gene_id', 'type_of_inheritance') \\\n    .withColumnRenamed('gene_symbol', 'Orphanet_gene_symbol') \\\n    .withColumnRenamed('disorder_id', 'Orphanet_disorder_id') \\\n    .withColumnRenamed('gene_source_of_validation', 'Orphanet_gene_source_of_validation') \\\n    .withColumnRenamed('HGNC_gene_id', 'Orphanet_HGNC_gene_id') \\\n    .withColumnRenamed('type_of_inheritance', 'Orphanet_type_of_inheritance') \\\n    .groupBy('Orphanet_gene_symbol') \\\n    .agg(F.collect_set('Orphanet_disorder_id').cast(StringType()).alias('Orphanet_disorder_id_combined'), \\\n         F.collect_set('Orphanet_gene_source_of_validation').cast(StringType()).alias('Orphanet_gene_source_of_validation_combined'), \\\n         F.collect_set('Orphanet_HGNC_gene_id').cast(StringType()).alias('Orphanet_HGNC_gene_id'), \\\n         F.collect_set('Orphanet_type_of_inheritance').cast(StringType()).alias('Orphanet_type_of_inheritance_combined')) \\\n    .withColumn('Orphanet_type_of_inheritance_combined', \\\n                F.when(F.col('Orphanet_type_of_inheritance_combined') == '[]', F.lit(None)).otherwise(F.col('Orphanet_type_of_inheritance_combined'))) \\\n    .withColumn('Orphanet_gene_source_of_validation_combined', \\\n                F.when(F.col('Orphanet_gene_source_of_validation_combined') == '[]', F.lit(None)).otherwise(F.col('Orphanet_gene_source_of_validation_combined'))) \\\n    .withColumn('Orphanet_HGNC_gene_id', \\\n                F.when(F.col('Orphanet_HGNC_gene_id') == '[]', F.lit(None)).otherwise(F.col('Orphanet_HGNC_gene_id')))\n\ntopmed = spark.read.parquet('/sbgenomics/project-files/topmed_bravo/').select(cond + [F.col('af')])\n")


# # 2. Setting parameters

# In[3]:


get_ipython().run_cell_magic('time', '', '# Keep only high impact variants\nconsequences_to_keep = ["transcript_ablation",\n    "splice_acceptor_variant",\n    "splice_donor_variant",\n    "stop_gained",\n    "frameshift_variant",\n    "stop_lost",\n    "start_lost",\n    "transcript_amplification",\n    "inframe_insertion",\n    "inframe_deletion",\n    "missense_variant",\n    "protein_altering_variant",\n    "splice_region_variant",\n    "incomplete_terminal_codon_variant",\n    "start_retained_variant",\n    "stop_retained_variant",\n    "coding_sequence_variant"]\n\n# Set minor allele frequency (MAF) threshold for heterozygotes in gnomAD and TOPMed\nhet_maf = 0.00001\n\n# Set minor allele frequency (MAF) threshold for homozygotes in gnomAD and TOPMed\nhom_maf = 0.0001\n\n# Set range for the ratio of DamagePredCount to AllPredCount in dbNSFP\ndpc_l = 0.5\ndpc_u = 1\n\n# Check known variants\nknown_variants_l = (\'HGMD\', \'Clinvar\')\n')


# # 3. Running

# In[4]:


get_ipython().run_cell_magic('time', '', '\n# 1st run (n = 2 families, ~ 1 hour 20 minutes)\n# FM_ID_list = [\n#     \'FM_0MGM6V1G\',\n#     \'FM_1C4W02W1\'\n# ]\n\n# 2nd run (n = 12 families, ~ 8 hours)\n# FM_ID_list = [\n#     \'FM_1Y8Q3HRV\',\n#     \'FM_26Q86FEQ\',\n#     \'FM_3J22KWBW\',\n#     \'FM_3NA6YK2D\',\n#     \'FM_594K85Y8\',\n#     \'FM_5H9EV50W\',\n#     \'FM_6BMYFFSP\',\n#     \'FM_6EPRZKD0\',\n#     \'FM_7G0VF0DR\',\n#     \'FM_7NVZVWN8\',\n#     \'FM_7PSTV73F\',\n#     \'FM_98J3AS6M\'\n# ]\n\n# 3rd run (n = 12 families, ~ 8 hours 15 minutes)\n# FM_ID_list = [\n#     \'FM_9CM5K9QJ\',\n#     \'FM_A2R6RQMJ\',\n#     \'FM_AKMP66AP\',\n#     \'FM_B38WCRS5\',\n#     \'FM_B5CHG0G7\',\n#     \'FM_BK5Q9RT4\',\n#     \'FM_CEJNW08N\',\n#     \'FM_DXJ8WDRV\',\n#     \'FM_E6SMN2E6\',\n#     \'FM_F1KAQ3ZY\',\n#     \'FM_FJ3V5H2W\',\n#     \'FM_FZ5VSREY\'\n# ]\n\n# 4th run (n = 8 families, ~ 5.5 hours)\n# FM_ID_list = [\n#     \'FM_GEN3XWJN\',\n#     \'FM_KQYZFMTY\',\n#     \'FM_MCD85X6W\',\n#     \'FM_MRDMPJ7T\',\n#     \'FM_MTKEA3D3\',\n#     \'FM_N2QPR730\',\n#     \'FM_ND9WJQA8\',\n#     \'FM_NEBKNCYR\']\n# ]\n\n# 5th run (n = 8 families, ~ 5.5 hours)\n# FM_ID_list = [\n#     \'FM_NVJWP4NY\',\n#     \'FM_NWYEP6D4\',\n#     \'FM_PE5TZZED\',\n#     \'FM_PQP9F4TN\',\n#     \'FM_PS2X1T6E\',\n#     \'FM_Q5C12JX0\',\n#     \'FM_QWGR7K9P\',\n#     \'FM_T09201V6\'\n# ]\n\n# 6th run (n = 8 families, ~ 6 hours)\n# FM_ID_list = [\n#     \'FM_T38MPJM7\',\n#     \'FM_VD1GH7C9\',\n#     \'FM_WHJQY6KJ\',\n#     \'FM_XC4SXN3S\',\n#     \'FM_XED7AAGB\',\n#     \'FM_XFW44GWE\',\n#     \'FM_Y93A2MXJ\',\n#     \'FM_YFYZAHV3\'\n# ]\n\n# 7th run (n = 2 families, ~ 1 hour 20 min)\nFM_ID_list = [\n    \'FM_ZQE861BE\',\n    \'FM_ZSCEA6VJ\'\n]\n\nfor FM_ID in FM_ID_list:\n    for Inh_type in [\'out\', \'AR_comphet\']:\n        \n        # Load input file\n        input_file = \'/sbgenomics/project-files/MMC/\' + FM_ID + \'.\' + Inh_type + \'.tsv.gz\'\n        family_out = spark \\\n            .read \\\n            .options(delimiter="\\t", header=True) \\\n            .csv(input_file) \\\n            .withColumnRenamed(\'CHROM\', \'chromosome\') \\\n            .withColumnRenamed(\'POS\', \'start\') \\\n            .withColumnRenamed(\'REF\', \'reference\') \\\n            .withColumnRenamed(\'ALT\', \'alternate\') \\\n            .withColumnRenamed(\'QUAL\', \'quality\')\n        family_out = family_out \\\n            .withColumn(\'chromosome\', \\\n                        F.when(family_out.chromosome.startswith(\'chr\'), F.regexp_replace(\'chromosome\', \'chr\', \'\')) \\\n                        .otherwise(family_out.chromosome))\n        \n        # Keep high impact variants\n        table_imported_exon = family_out \\\n            .where(F.col(\'CSQ_Consequence\').isin(consequences_to_keep))\n        \n        # Attach TOPMed and max gnomAD/TOPMed frequencies\n        table_imported_exon = table_imported_exon \\\n            .join(topmed.alias(\'g\'), cond, \'left\') \\\n            .select([F.col(x) for x in table_imported_exon.columns] + [F.col(\'g.af\')]) \\\n            .withColumnRenamed(\'af\', \'TOPMed_af\')\n        table_imported_exon = table_imported_exon \\\n            .withColumn(\'max_gnomad_topmed\', F.greatest( \\\n                F.lit(0), \\\n                F.col(\'CSQ_gnomAD_AF\').cast(\'double\'), \\\n                F.col(\'CSQ_gnomAD_exomes_controls_AF\').cast(\'double\'), \\\n                F.col(\'CSQ_ALSPAC_AF\').cast(\'double\'), \\\n                F.col(\'CSQ_TWINSUK_AF\').cast(\'double\'), \\\n                F.col(\'CSQ_UK10K_AF\').cast(\'double\'), \\\n                F.col(\'INFO_gnomad_3_1_1_AF\').cast(\'double\'), \\\n                F.col(\'TOPMed_af\').cast(\'double\')))\n        \n        # Flag using MAF\n        if Inh_type == \'out\':\n            table_imported_exon = table_imported_exon \\\n                .withColumn(\'flag_keep\', F.when(\n                    (\n                        (F.col(\'max_gnomad_topmed\') <= het_maf) \\\n                        & F.col(\'Inheritance\').startswith(\'AD_\')\n                    ) \\\n                    | (\n                        (F.col(\'max_gnomad_topmed\') <= hom_maf) \\\n                        & ((F.col(\'Inheritance\') == \'AR_homo\') | F.col(\'Inheritance\').startswith(\'XLR_\'))\n                    ), 1).otherwise(0))\n        else: # Inh_type == \'AR_comphet\'\n            table_imported_exon = table_imported_exon \\\n                .withColumn(\'flag_keep\', F.when(F.col(\'max_gnomad_topmed\') <= hom_maf, 1).otherwise(0))\n        \n        # Table ClinVar, restricted to those seen in variants and labeled as pathogenic/likely_pathogenic\n        c_clv = [\'VariationID\', \'clin_sig\']\n        t_clv = clinvar \\\n            .withColumnRenamed(\'name\', \'VariationID\') \\\n            .where((F.array_contains(F.col(\'clin_sig\'), \'Pathogenic\') | F.array_contains(F.col(\'clin_sig\'), \'Likely_pathogenic\'))) \\\n            .join(table_imported_exon, cond) \\\n            .select(cond + c_clv)\n        \n        # Table HGMD, restricted to those seen in variants and labeled as DM or DM?\n        c_hgmd = [\'HGMDID\', \'variant_class\']\n        t_hgmd = hgmd_var \\\n            .withColumnRenamed(\'id\', \'HGMDID\') \\\n            .where(F.col(\'variant_class\').startswith(\'DM\')) \\\n            .join(table_imported_exon, cond) \\\n            .select(cond + c_hgmd)\n        \n        # Join imported table to dbnsfp, keep variants with PredCountRatio_D2T between dpc_l and dpc_u (both inclusive)\n        table_imported_exon_dbn = table_imported_exon \\\n            .join(t_dbn, cond, how=\'left\') \\\n            .withColumn(\'flag_keep\', F.when((table_imported_exon.flag_keep == 1) \\\n                & F.col(\'PredCountRatio_D2T\').isNotNull() \\\n                & (F.col(\'PredCountRatio_D2T\') >= dpc_l) \\\n                & (F.col(\'PredCountRatio_D2T\') <= dpc_u), 1) \\\n            .otherwise(table_imported_exon.flag_keep))\n        # print(table_imported_exon_dbn.count())\n        \n        # Include ClinVar if specified\n        if \'Clinvar\' in known_variants_l and t_clv.count() > 0:\n            table_imported_exon_dbn = table_imported_exon_dbn \\\n                .join(t_clv, cond, how=\'left\') \\\n                .withColumn(\'flag_keep\', F.when(F.col(\'VariationID\').isNotNull(), 1) \\\n                .otherwise(table_imported_exon_dbn.flag_keep))\n        # print(table_imported_exon_dbn.count())\n        \n        # Include HGMD if specified\n        if \'HGMD\' in known_variants_l and t_hgmd.count() > 0:\n            table_imported_exon_dbn = table_imported_exon_dbn \\\n                .join(t_hgmd, cond, how=\'left\') \\\n                .withColumn(\'flag_keep\', F.when(F.col(\'HGMDID\').isNotNull(), 1) \\\n                .otherwise(table_imported_exon_dbn.flag_keep))\n        # print(table_imported_exon_dbn.count())\n        \n        # Attach HGMD gene-disease relationships\n        table_imported_exon_dbn_phenotypes = table_imported_exon_dbn \\\n            .join(g_hgmd.alias(\'g\'), table_imported_exon_dbn.CSQ_SYMBOL == g_hgmd.HGMD_symbol, \'left\') \\\n            .select([F.col(x) for x in table_imported_exon_dbn.columns] + \\\n                    [F.col(\'g.entrez_gene_id\'), \\\n                     F.col(\'g.HGMD_DM\'), \\\n                     F.col(\'g.HGMD_DM?\')])\n        \n        # Attach OMIM gene-disease relationships\n        table_imported_exon_dbn_phenotypes = table_imported_exon_dbn_phenotypes \\\n            .join(g_omim.alias(\'g\'), table_imported_exon_dbn_phenotypes.entrez_gene_id == g_omim.OMIM_entrez_gene_id, \'left\') \\\n            .select([F.col(x) for x in table_imported_exon_dbn_phenotypes.columns] + \\\n                    [F.col(\'g.OMIM_gene_id\'), \\\n                     F.col(\'g.OMIM_phenotype_combined\')])\n        \n        # Attach Orphanet gene-disease relationships\n        table_imported_exon_dbn_phenotypes = table_imported_exon_dbn_phenotypes \\\n            .join(g_orph.alias(\'g\'), table_imported_exon_dbn_phenotypes.CSQ_SYMBOL == g_orph.Orphanet_gene_symbol, \'left\') \\\n            .select([F.col(x) for x in table_imported_exon_dbn_phenotypes.columns] \\\n                + [F.col(\'g.Orphanet_disorder_id_combined\'), \\\n                   F.col(\'g.Orphanet_gene_source_of_validation_combined\'), \\\n                   F.col(\'g.Orphanet_HGNC_gene_id\'), \\\n                   F.col(\'g.Orphanet_type_of_inheritance_combined\')])\n        \n        # Attach GenCC gene-disease relationships\n        table_imported_exon_dbn_phenotypes = table_imported_exon_dbn_phenotypes \\\n            .join(g_genc.alias(\'g\'), table_imported_exon_dbn_phenotypes.CSQ_SYMBOL == g_genc.GenCC_gene_symbol, \'left\') \\\n            .select([F.col(x) for x in table_imported_exon_dbn_phenotypes.columns] \\\n                + [F.col(\'g.GenCC_disease_curie_combined\'), \\\n                   F.col(\'g.GenCC_disease_title_combined\'), \\\n                   F.col(\'g.GenCC_classification_title_combined\'), \\\n                   F.col(\'g.GenCC_moi_title_combined\')]) \\\n            .sort(F.asc( \\\n                    F.when(F.col(\'chromosome\').isin([\'X\', \'Y\', \'x\', \'y\']), F.lpad(\'chromosome\', 2, \'2\')) \\\n                        .otherwise(F.lpad(\'chromosome\', 2, \'0\')) \\\n                    ), \\\n                    F.asc(F.col(\'start\'))\n                )\n        \n        # Generate output\n        cols_json = [F.to_json(c[0]).alias(c[0]) if c[1].startswith("struct") else F.col(c[0]) for c in table_imported_exon_dbn_phenotypes.dtypes]\n        cols_ws = [F.concat_ws(\',\', c[0]).alias(c[0]) if c[1].startswith("array") else F.col(c[0]) for c in table_imported_exon_dbn_phenotypes.dtypes]\n        output_file = \'/sbgenomics/output-files/\' + FM_ID + \'.\' + Inh_type + \'.VWB_result.tsv\'\n        table_imported_exon_dbn_phenotypes = table_imported_exon_dbn_phenotypes \\\n            .select(cols_json) \\\n            .select(cols_ws) \\\n            .toPandas() \\\n            .to_csv(output_file, sep=\'\\t\', header=True, index=False, line_terminator=\'\\n\')\n')


# In[ ]:




